// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smarket.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import adservice "github.com/synerex/synerex_alpha/api/adservice"
import fleet "github.com/synerex/synerex_alpha/api/fleet"
import library "github.com/synerex/synerex_alpha/api/library"
import ptransit "github.com/synerex/synerex_alpha/api/ptransit"
import rideshare "github.com/synerex/synerex_alpha/api/rideshare"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MarketType int32

const (
	MarketType_NONE        MarketType = 0
	MarketType_RIDE_SHARE  MarketType = 1
	MarketType_AD_SERVICE  MarketType = 2
	MarketType_LIB_SERVICE MarketType = 3
	MarketType_PT_SERVICE  MarketType = 4
	MarketType_END         MarketType = 10
)

var MarketType_name = map[int32]string{
	0:  "NONE",
	1:  "RIDE_SHARE",
	2:  "AD_SERVICE",
	3:  "LIB_SERVICE",
	4:  "PT_SERVICE",
	10: "END",
}
var MarketType_value = map[string]int32{
	"NONE":        0,
	"RIDE_SHARE":  1,
	"AD_SERVICE":  2,
	"LIB_SERVICE": 3,
	"PT_SERVICE":  4,
	"END":         10,
}

func (x MarketType) String() string {
	return proto.EnumName(MarketType_name, int32(x))
}
func (MarketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{0}
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{0}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ConfirmResponse struct {
	Ok                   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,2,opt,name=wait,proto3" json:"wait,omitempty"`
	Err                  string             `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ConfirmResponse) Reset()         { *m = ConfirmResponse{} }
func (m *ConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmResponse) ProtoMessage()    {}
func (*ConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{1}
}
func (m *ConfirmResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmResponse.Unmarshal(m, b)
}
func (m *ConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmResponse.Marshal(b, m, deterministic)
}
func (dst *ConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmResponse.Merge(dst, src)
}
func (m *ConfirmResponse) XXX_Size() int {
	return xxx_messageInfo_ConfirmResponse.Size(m)
}
func (m *ConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmResponse proto.InternalMessageInfo

func (m *ConfirmResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ConfirmResponse) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

func (m *ConfirmResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type Supply struct {
	Id         uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId   uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId   uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type       MarketType           `protobuf:"varint,4,opt,name=type,proto3,enum=api.MarketType" json:"type,omitempty"`
	SupplyName string               `protobuf:"bytes,5,opt,name=supply_name,json=supplyName,proto3" json:"supply_name,omitempty"`
	Ts         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	// message content = 7; // json
	ArgJson string `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	// Types that are valid to be assigned to ArgOneof:
	//	*Supply_Arg_Fleet
	//	*Supply_Arg_RideShare
	//	*Supply_Arg_AdService
	//	*Supply_Arg_LibService
	//	*Supply_Arg_PTService
	ArgOneof             isSupply_ArgOneof `protobuf_oneof:"arg_oneof"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{2}
}
func (m *Supply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Supply.Unmarshal(m, b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
}
func (dst *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(dst, src)
}
func (m *Supply) XXX_Size() int {
	return xxx_messageInfo_Supply.Size(m)
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Supply) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Supply) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Supply) GetType() MarketType {
	if m != nil {
		return m.Type
	}
	return MarketType_NONE
}

func (m *Supply) GetSupplyName() string {
	if m != nil {
		return m.SupplyName
	}
	return ""
}

func (m *Supply) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Supply) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type isSupply_ArgOneof interface {
	isSupply_ArgOneof()
}

type Supply_Arg_Fleet struct {
	Arg_Fleet *fleet.Fleet `protobuf:"bytes,10,opt,name=arg_Fleet,json=argFleet,proto3,oneof"`
}

type Supply_Arg_RideShare struct {
	Arg_RideShare *rideshare.RideShare `protobuf:"bytes,11,opt,name=arg_RideShare,json=argRideShare,proto3,oneof"`
}

type Supply_Arg_AdService struct {
	Arg_AdService *adservice.AdService `protobuf:"bytes,12,opt,name=arg_AdService,json=argAdService,proto3,oneof"`
}

type Supply_Arg_LibService struct {
	Arg_LibService *library.LibService `protobuf:"bytes,13,opt,name=arg_LibService,json=argLibService,proto3,oneof"`
}

type Supply_Arg_PTService struct {
	Arg_PTService *ptransit.PTService `protobuf:"bytes,14,opt,name=arg_PTService,json=argPTService,proto3,oneof"`
}

func (*Supply_Arg_Fleet) isSupply_ArgOneof() {}

func (*Supply_Arg_RideShare) isSupply_ArgOneof() {}

func (*Supply_Arg_AdService) isSupply_ArgOneof() {}

func (*Supply_Arg_LibService) isSupply_ArgOneof() {}

func (*Supply_Arg_PTService) isSupply_ArgOneof() {}

func (m *Supply) GetArgOneof() isSupply_ArgOneof {
	if m != nil {
		return m.ArgOneof
	}
	return nil
}

func (m *Supply) GetArg_Fleet() *fleet.Fleet {
	if x, ok := m.GetArgOneof().(*Supply_Arg_Fleet); ok {
		return x.Arg_Fleet
	}
	return nil
}

func (m *Supply) GetArg_RideShare() *rideshare.RideShare {
	if x, ok := m.GetArgOneof().(*Supply_Arg_RideShare); ok {
		return x.Arg_RideShare
	}
	return nil
}

func (m *Supply) GetArg_AdService() *adservice.AdService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_AdService); ok {
		return x.Arg_AdService
	}
	return nil
}

func (m *Supply) GetArg_LibService() *library.LibService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_LibService); ok {
		return x.Arg_LibService
	}
	return nil
}

func (m *Supply) GetArg_PTService() *ptransit.PTService {
	if x, ok := m.GetArgOneof().(*Supply_Arg_PTService); ok {
		return x.Arg_PTService
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Supply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Supply_OneofMarshaler, _Supply_OneofUnmarshaler, _Supply_OneofSizer, []interface{}{
		(*Supply_Arg_Fleet)(nil),
		(*Supply_Arg_RideShare)(nil),
		(*Supply_Arg_AdService)(nil),
		(*Supply_Arg_LibService)(nil),
		(*Supply_Arg_PTService)(nil),
	}
}

func _Supply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Supply)
	// arg_oneof
	switch x := m.ArgOneof.(type) {
	case *Supply_Arg_Fleet:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_Fleet); err != nil {
			return err
		}
	case *Supply_Arg_RideShare:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_RideShare); err != nil {
			return err
		}
	case *Supply_Arg_AdService:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_AdService); err != nil {
			return err
		}
	case *Supply_Arg_LibService:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_LibService); err != nil {
			return err
		}
	case *Supply_Arg_PTService:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_PTService); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Supply.ArgOneof has unexpected type %T", x)
	}
	return nil
}

func _Supply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Supply)
	switch tag {
	case 10: // arg_oneof.arg_Fleet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(fleet.Fleet)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Supply_Arg_Fleet{msg}
		return true, err
	case 11: // arg_oneof.arg_RideShare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(rideshare.RideShare)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Supply_Arg_RideShare{msg}
		return true, err
	case 12: // arg_oneof.arg_AdService
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(adservice.AdService)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Supply_Arg_AdService{msg}
		return true, err
	case 13: // arg_oneof.arg_LibService
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(library.LibService)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Supply_Arg_LibService{msg}
		return true, err
	case 14: // arg_oneof.arg_PTService
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ptransit.PTService)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Supply_Arg_PTService{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Supply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Supply)
	// arg_oneof
	switch x := m.ArgOneof.(type) {
	case *Supply_Arg_Fleet:
		s := proto.Size(x.Arg_Fleet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Supply_Arg_RideShare:
		s := proto.Size(x.Arg_RideShare)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Supply_Arg_AdService:
		s := proto.Size(x.Arg_AdService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Supply_Arg_LibService:
		s := proto.Size(x.Arg_LibService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Supply_Arg_PTService:
		s := proto.Size(x.Arg_PTService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Demand struct {
	Id         uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId   uint64               `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId   uint64               `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type       MarketType           `protobuf:"varint,4,opt,name=type,proto3,enum=api.MarketType" json:"type,omitempty"`
	DemandName string               `protobuf:"bytes,5,opt,name=demand_name,json=demandName,proto3" json:"demand_name,omitempty"`
	Ts         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
	// message content = 7; // json
	ArgJson string `protobuf:"bytes,7,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	// Types that are valid to be assigned to ArgOneof:
	//	*Demand_Arg_Fleet
	//	*Demand_Arg_RideShare
	//	*Demand_Arg_AdService
	//	*Demand_Arg_LibService
	//	*Demand_Arg_PTService
	ArgOneof             isDemand_ArgOneof `protobuf_oneof:"arg_oneof"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Demand) Reset()         { *m = Demand{} }
func (m *Demand) String() string { return proto.CompactTextString(m) }
func (*Demand) ProtoMessage()    {}
func (*Demand) Descriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{3}
}
func (m *Demand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Demand.Unmarshal(m, b)
}
func (m *Demand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Demand.Marshal(b, m, deterministic)
}
func (dst *Demand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Demand.Merge(dst, src)
}
func (m *Demand) XXX_Size() int {
	return xxx_messageInfo_Demand.Size(m)
}
func (m *Demand) XXX_DiscardUnknown() {
	xxx_messageInfo_Demand.DiscardUnknown(m)
}

var xxx_messageInfo_Demand proto.InternalMessageInfo

func (m *Demand) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Demand) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Demand) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Demand) GetType() MarketType {
	if m != nil {
		return m.Type
	}
	return MarketType_NONE
}

func (m *Demand) GetDemandName() string {
	if m != nil {
		return m.DemandName
	}
	return ""
}

func (m *Demand) GetTs() *timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Demand) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

type isDemand_ArgOneof interface {
	isDemand_ArgOneof()
}

type Demand_Arg_Fleet struct {
	Arg_Fleet *fleet.Fleet `protobuf:"bytes,10,opt,name=arg_Fleet,json=argFleet,proto3,oneof"`
}

type Demand_Arg_RideShare struct {
	Arg_RideShare *rideshare.RideShare `protobuf:"bytes,11,opt,name=arg_RideShare,json=argRideShare,proto3,oneof"`
}

type Demand_Arg_AdService struct {
	Arg_AdService *adservice.AdService `protobuf:"bytes,12,opt,name=arg_AdService,json=argAdService,proto3,oneof"`
}

type Demand_Arg_LibService struct {
	Arg_LibService *library.LibService `protobuf:"bytes,13,opt,name=arg_LibService,json=argLibService,proto3,oneof"`
}

type Demand_Arg_PTService struct {
	Arg_PTService *ptransit.PTService `protobuf:"bytes,14,opt,name=arg_PTService,json=argPTService,proto3,oneof"`
}

func (*Demand_Arg_Fleet) isDemand_ArgOneof() {}

func (*Demand_Arg_RideShare) isDemand_ArgOneof() {}

func (*Demand_Arg_AdService) isDemand_ArgOneof() {}

func (*Demand_Arg_LibService) isDemand_ArgOneof() {}

func (*Demand_Arg_PTService) isDemand_ArgOneof() {}

func (m *Demand) GetArgOneof() isDemand_ArgOneof {
	if m != nil {
		return m.ArgOneof
	}
	return nil
}

func (m *Demand) GetArg_Fleet() *fleet.Fleet {
	if x, ok := m.GetArgOneof().(*Demand_Arg_Fleet); ok {
		return x.Arg_Fleet
	}
	return nil
}

func (m *Demand) GetArg_RideShare() *rideshare.RideShare {
	if x, ok := m.GetArgOneof().(*Demand_Arg_RideShare); ok {
		return x.Arg_RideShare
	}
	return nil
}

func (m *Demand) GetArg_AdService() *adservice.AdService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_AdService); ok {
		return x.Arg_AdService
	}
	return nil
}

func (m *Demand) GetArg_LibService() *library.LibService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_LibService); ok {
		return x.Arg_LibService
	}
	return nil
}

func (m *Demand) GetArg_PTService() *ptransit.PTService {
	if x, ok := m.GetArgOneof().(*Demand_Arg_PTService); ok {
		return x.Arg_PTService
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Demand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Demand_OneofMarshaler, _Demand_OneofUnmarshaler, _Demand_OneofSizer, []interface{}{
		(*Demand_Arg_Fleet)(nil),
		(*Demand_Arg_RideShare)(nil),
		(*Demand_Arg_AdService)(nil),
		(*Demand_Arg_LibService)(nil),
		(*Demand_Arg_PTService)(nil),
	}
}

func _Demand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Demand)
	// arg_oneof
	switch x := m.ArgOneof.(type) {
	case *Demand_Arg_Fleet:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_Fleet); err != nil {
			return err
		}
	case *Demand_Arg_RideShare:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_RideShare); err != nil {
			return err
		}
	case *Demand_Arg_AdService:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_AdService); err != nil {
			return err
		}
	case *Demand_Arg_LibService:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_LibService); err != nil {
			return err
		}
	case *Demand_Arg_PTService:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arg_PTService); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Demand.ArgOneof has unexpected type %T", x)
	}
	return nil
}

func _Demand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Demand)
	switch tag {
	case 10: // arg_oneof.arg_Fleet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(fleet.Fleet)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Demand_Arg_Fleet{msg}
		return true, err
	case 11: // arg_oneof.arg_RideShare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(rideshare.RideShare)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Demand_Arg_RideShare{msg}
		return true, err
	case 12: // arg_oneof.arg_AdService
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(adservice.AdService)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Demand_Arg_AdService{msg}
		return true, err
	case 13: // arg_oneof.arg_LibService
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(library.LibService)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Demand_Arg_LibService{msg}
		return true, err
	case 14: // arg_oneof.arg_PTService
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ptransit.PTService)
		err := b.DecodeMessage(msg)
		m.ArgOneof = &Demand_Arg_PTService{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Demand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Demand)
	// arg_oneof
	switch x := m.ArgOneof.(type) {
	case *Demand_Arg_Fleet:
		s := proto.Size(x.Arg_Fleet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Demand_Arg_RideShare:
		s := proto.Size(x.Arg_RideShare)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Demand_Arg_AdService:
		s := proto.Size(x.Arg_AdService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Demand_Arg_LibService:
		s := proto.Size(x.Arg_LibService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Demand_Arg_PTService:
		s := proto.Size(x.Arg_PTService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Target struct {
	Id                   uint64             `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId             uint64             `protobuf:"fixed64,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             uint64             `protobuf:"fixed64,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type                 MarketType         `protobuf:"varint,4,opt,name=type,proto3,enum=api.MarketType" json:"type,omitempty"`
	Wait                 *duration.Duration `protobuf:"bytes,5,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{4}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (dst *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(dst, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Target) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *Target) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Target) GetType() MarketType {
	if m != nil {
		return m.Type
	}
	return MarketType_NONE
}

func (m *Target) GetWait() *duration.Duration {
	if m != nil {
		return m.Wait
	}
	return nil
}

type Channel struct {
	ClientId             uint64     `protobuf:"fixed64,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Type                 MarketType `protobuf:"varint,2,opt,name=type,proto3,enum=api.MarketType" json:"type,omitempty"`
	ArgJson              string     `protobuf:"bytes,3,opt,name=arg_json,json=argJson,proto3" json:"arg_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_smarket_efd53cba6d6eca95, []int{5}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Channel) GetType() MarketType {
	if m != nil {
		return m.Type
	}
	return MarketType_NONE
}

func (m *Channel) GetArgJson() string {
	if m != nil {
		return m.ArgJson
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "api.Response")
	proto.RegisterType((*ConfirmResponse)(nil), "api.ConfirmResponse")
	proto.RegisterType((*Supply)(nil), "api.Supply")
	proto.RegisterType((*Demand)(nil), "api.Demand")
	proto.RegisterType((*Target)(nil), "api.Target")
	proto.RegisterType((*Channel)(nil), "api.Channel")
	proto.RegisterEnum("api.MarketType", MarketType_name, MarketType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SMarketClient is the client API for SMarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SMarketClient interface {
	RegisterDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	RegisterSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error)
	ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error)
	ReserveSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	ReserveDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error)
	Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error)
	SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (SMarket_SubscribeDemandClient, error)
	SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (SMarket_SubscribeSupplyClient, error)
}

type sMarketClient struct {
	cc *grpc.ClientConn
}

func NewSMarketClient(cc *grpc.ClientConn) SMarketClient {
	return &sMarketClient{cc}
}

func (c *sMarketClient) RegisterDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.SMarket/RegisterDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) RegisterSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.SMarket/RegisterSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) ProposeDemand(ctx context.Context, in *Demand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.SMarket/ProposeDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) ProposeSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.SMarket/ProposeSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) ReserveSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.SMarket/ReserveSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) ReserveDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.SMarket/ReserveDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) SelectSupply(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.SMarket/SelectSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) SelectDemand(ctx context.Context, in *Target, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/api.SMarket/SelectDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) Confirm(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.SMarket/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMarketClient) SubscribeDemand(ctx context.Context, in *Channel, opts ...grpc.CallOption) (SMarket_SubscribeDemandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SMarket_serviceDesc.Streams[0], "/api.SMarket/SubscribeDemand", opts...)
	if err != nil {
		return nil, err
	}
	x := &sMarketSubscribeDemandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SMarket_SubscribeDemandClient interface {
	Recv() (*Demand, error)
	grpc.ClientStream
}

type sMarketSubscribeDemandClient struct {
	grpc.ClientStream
}

func (x *sMarketSubscribeDemandClient) Recv() (*Demand, error) {
	m := new(Demand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sMarketClient) SubscribeSupply(ctx context.Context, in *Channel, opts ...grpc.CallOption) (SMarket_SubscribeSupplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SMarket_serviceDesc.Streams[1], "/api.SMarket/SubscribeSupply", opts...)
	if err != nil {
		return nil, err
	}
	x := &sMarketSubscribeSupplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SMarket_SubscribeSupplyClient interface {
	Recv() (*Supply, error)
	grpc.ClientStream
}

type sMarketSubscribeSupplyClient struct {
	grpc.ClientStream
}

func (x *sMarketSubscribeSupplyClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SMarketServer is the server API for SMarket service.
type SMarketServer interface {
	RegisterDemand(context.Context, *Demand) (*Response, error)
	RegisterSupply(context.Context, *Supply) (*Response, error)
	ProposeDemand(context.Context, *Demand) (*Response, error)
	ProposeSupply(context.Context, *Supply) (*Response, error)
	ReserveSupply(context.Context, *Target) (*ConfirmResponse, error)
	ReserveDemand(context.Context, *Target) (*ConfirmResponse, error)
	SelectSupply(context.Context, *Target) (*ConfirmResponse, error)
	SelectDemand(context.Context, *Target) (*ConfirmResponse, error)
	Confirm(context.Context, *Target) (*Response, error)
	SubscribeDemand(*Channel, SMarket_SubscribeDemandServer) error
	SubscribeSupply(*Channel, SMarket_SubscribeSupplyServer) error
}

func RegisterSMarketServer(s *grpc.Server, srv SMarketServer) {
	s.RegisterService(&_SMarket_serviceDesc, srv)
}

func _SMarket_RegisterDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).RegisterDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/RegisterDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).RegisterDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_RegisterSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).RegisterSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/RegisterSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).RegisterSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_ProposeDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).ProposeDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/ProposeDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).ProposeDemand(ctx, req.(*Demand))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_ProposeSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).ProposeSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/ProposeSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).ProposeSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_ReserveSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).ReserveSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/ReserveSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).ReserveSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_ReserveDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).ReserveDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/ReserveDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).ReserveDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_SelectSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).SelectSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/SelectSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).SelectSupply(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_SelectDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).SelectDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/SelectDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).SelectDemand(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMarketServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SMarket/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMarketServer).Confirm(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMarket_SubscribeDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SMarketServer).SubscribeDemand(m, &sMarketSubscribeDemandServer{stream})
}

type SMarket_SubscribeDemandServer interface {
	Send(*Demand) error
	grpc.ServerStream
}

type sMarketSubscribeDemandServer struct {
	grpc.ServerStream
}

func (x *sMarketSubscribeDemandServer) Send(m *Demand) error {
	return x.ServerStream.SendMsg(m)
}

func _SMarket_SubscribeSupply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SMarketServer).SubscribeSupply(m, &sMarketSubscribeSupplyServer{stream})
}

type SMarket_SubscribeSupplyServer interface {
	Send(*Supply) error
	grpc.ServerStream
}

type sMarketSubscribeSupplyServer struct {
	grpc.ServerStream
}

func (x *sMarketSubscribeSupplyServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

var _SMarket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SMarket",
	HandlerType: (*SMarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDemand",
			Handler:    _SMarket_RegisterDemand_Handler,
		},
		{
			MethodName: "RegisterSupply",
			Handler:    _SMarket_RegisterSupply_Handler,
		},
		{
			MethodName: "ProposeDemand",
			Handler:    _SMarket_ProposeDemand_Handler,
		},
		{
			MethodName: "ProposeSupply",
			Handler:    _SMarket_ProposeSupply_Handler,
		},
		{
			MethodName: "ReserveSupply",
			Handler:    _SMarket_ReserveSupply_Handler,
		},
		{
			MethodName: "ReserveDemand",
			Handler:    _SMarket_ReserveDemand_Handler,
		},
		{
			MethodName: "SelectSupply",
			Handler:    _SMarket_SelectSupply_Handler,
		},
		{
			MethodName: "SelectDemand",
			Handler:    _SMarket_SelectDemand_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _SMarket_Confirm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDemand",
			Handler:       _SMarket_SubscribeDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSupply",
			Handler:       _SMarket_SubscribeSupply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "smarket.proto",
}

func init() { proto.RegisterFile("smarket.proto", fileDescriptor_smarket_efd53cba6d6eca95) }

var fileDescriptor_smarket_efd53cba6d6eca95 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6f, 0x12, 0x41,
	0x14, 0x86, 0x85, 0x02, 0x7d, 0xfc, 0x74, 0xa2, 0xe9, 0x16, 0x13, 0xdb, 0xe0, 0xc1, 0xa6, 0xb1,
	0x6c, 0xd3, 0x7a, 0x56, 0xdb, 0x82, 0x01, 0x53, 0xb1, 0x99, 0x25, 0x1e, 0xbc, 0xe0, 0xc0, 0x0e,
	0x74, 0x2c, 0xec, 0x6e, 0x66, 0x06, 0x0d, 0x7f, 0x8e, 0x17, 0x0f, 0xfe, 0x95, 0x66, 0x66, 0x76,
	0x17, 0x68, 0xfd, 0xd1, 0x5e, 0xd4, 0x83, 0x97, 0x76, 0xde, 0xfb, 0xde, 0xfb, 0xbe, 0xf7, 0x98,
	0x8f, 0x5d, 0xa0, 0x2c, 0x66, 0x84, 0x5f, 0x51, 0xd9, 0x0c, 0x79, 0x20, 0x03, 0x94, 0x21, 0x21,
	0xab, 0xef, 0x4c, 0x82, 0x60, 0x32, 0xa5, 0x8e, 0x4e, 0x0d, 0xe7, 0x63, 0x47, 0xb2, 0x19, 0x15,
	0x92, 0xcc, 0x42, 0x53, 0x55, 0x7f, 0x74, 0xbd, 0xc0, 0x9b, 0x73, 0x22, 0x59, 0xe0, 0x47, 0xf8,
	0xbd, 0xf1, 0x94, 0x52, 0xe9, 0xe8, 0xbf, 0x51, 0x6a, 0x9b, 0x33, 0x8f, 0x8a, 0x4b, 0xc2, 0xa9,
	0x93, 0x9c, 0x62, 0x88, 0x78, 0x82, 0xf2, 0x4f, 0x6c, 0x44, 0x9d, 0xe4, 0x14, 0x41, 0x0f, 0xa6,
	0x6c, 0xc8, 0x09, 0x5f, 0x38, 0xd1, 0xff, 0x28, 0xbd, 0x15, 0x4a, 0x4e, 0x7c, 0xc1, 0xa4, 0x13,
	0x1f, 0x0c, 0xd0, 0x78, 0x0a, 0x05, 0x4c, 0x45, 0x18, 0xf8, 0x82, 0xa2, 0x0a, 0x58, 0xc1, 0x95,
	0x9d, 0xde, 0x4d, 0xef, 0x15, 0xb0, 0x15, 0x5c, 0xa1, 0x1a, 0x64, 0x28, 0xe7, 0xb6, 0xb5, 0x9b,
	0xde, 0xdb, 0xc4, 0xea, 0xd8, 0x18, 0x42, 0xf5, 0x2c, 0xf0, 0xc7, 0x8c, 0xcf, 0x7e, 0xda, 0x74,
	0x00, 0xd9, 0xcf, 0x84, 0x49, 0xdd, 0x55, 0x3c, 0xda, 0x6e, 0x9a, 0xc5, 0x9b, 0xf1, 0xe2, 0xcd,
	0x56, 0xb4, 0x38, 0xd6, 0x65, 0xb1, 0x46, 0x66, 0xa9, 0xf1, 0x25, 0x0b, 0x39, 0x77, 0x1e, 0x86,
	0xd3, 0x85, 0xe2, 0x66, 0x9e, 0xe6, 0xce, 0x61, 0x8b, 0x79, 0xe8, 0x21, 0x6c, 0x0a, 0xea, 0x7b,
	0x94, 0x0f, 0x98, 0xa7, 0x05, 0x72, 0xb8, 0x60, 0x12, 0x5d, 0x0d, 0x4a, 0xc2, 0x27, 0x54, 0x2a,
	0x30, 0x63, 0x40, 0x93, 0xe8, 0x7a, 0xe8, 0x31, 0x64, 0xe5, 0x22, 0xa4, 0x76, 0x76, 0x37, 0xbd,
	0x57, 0x39, 0xaa, 0x36, 0x49, 0xc8, 0x9a, 0x6f, 0xf4, 0x35, 0xf6, 0x17, 0x21, 0xc5, 0x1a, 0x44,
	0x3b, 0x50, 0x14, 0x5a, 0x78, 0xe0, 0x93, 0x19, 0xb5, 0x37, 0xf4, 0x4c, 0x60, 0x52, 0x3d, 0x32,
	0xa3, 0x68, 0x1f, 0x2c, 0x29, 0xec, 0x9c, 0xde, 0xac, 0x7e, 0x63, 0xb3, 0x7e, 0x7c, 0xe7, 0xd8,
	0x92, 0x02, 0x6d, 0x43, 0x81, 0xf0, 0xc9, 0xe0, 0xa3, 0x08, 0x7c, 0x3b, 0xaf, 0x99, 0xf2, 0x84,
	0x4f, 0x5e, 0x8b, 0xc0, 0x47, 0x0e, 0x6c, 0x2a, 0xe8, 0x95, 0xba, 0x6c, 0x1b, 0x34, 0x5b, 0x4d,
	0x4f, 0x64, 0xae, 0x5f, 0xe7, 0x3b, 0x29, 0xac, 0xfa, 0xf5, 0x19, 0xbd, 0x80, 0xb2, 0x6a, 0xc0,
	0xcc, 0xa3, 0xae, 0xb2, 0x81, 0x5d, 0xd4, 0x4d, 0xb6, 0x6e, 0x5a, 0x9a, 0x23, 0xc1, 0x3b, 0x29,
	0x5c, 0x22, 0x7c, 0x92, 0xc4, 0x31, 0xc1, 0x89, 0xe7, 0x1a, 0xb3, 0xd8, 0xa5, 0x15, 0x82, 0xa5,
	0x85, 0x12, 0x3c, 0x22, 0x48, 0x62, 0xf4, 0x12, 0x2a, 0x8a, 0xe0, 0x9c, 0x0d, 0x63, 0x86, 0xb2,
	0x66, 0xd8, 0xd2, 0x0c, 0xb1, 0xd7, 0x96, 0x70, 0x27, 0x85, 0x95, 0xe2, 0x32, 0x81, 0x9e, 0x9b,
	0x11, 0x2e, 0xfa, 0x31, 0x41, 0x65, 0x85, 0x20, 0x31, 0x65, 0x02, 0x47, 0x13, 0x24, 0xf1, 0x69,
	0xd1, 0x7c, 0x68, 0x81, 0x4f, 0x83, 0xb1, 0xf6, 0x48, 0x8b, 0xce, 0x88, 0xef, 0xfd, 0x05, 0x8f,
	0x78, 0x5a, 0x78, 0xcd, 0x23, 0x26, 0xf5, 0xdf, 0x23, 0xff, 0x92, 0x47, 0xbe, 0xa6, 0x21, 0xd7,
	0xd7, 0x77, 0xfb, 0xa7, 0x3d, 0x12, 0x3f, 0x02, 0x37, 0x6e, 0xf5, 0x08, 0x6c, 0x8c, 0x21, 0x7f,
	0x76, 0x49, 0x7c, 0x9f, 0x4e, 0x95, 0xf6, 0x68, 0xca, 0xa8, 0xaf, 0xb5, 0xcd, 0xbc, 0x05, 0x93,
	0x58, 0xd1, 0xb6, 0x7e, 0xa5, 0xbd, 0x6a, 0xa9, 0xcc, 0x9a, 0xa5, 0xf6, 0x3f, 0x00, 0x2c, 0xcb,
	0x51, 0x01, 0xb2, 0xbd, 0xb7, 0xbd, 0x76, 0x2d, 0x85, 0x2a, 0x00, 0xb8, 0xdb, 0x6a, 0x0f, 0xdc,
	0xce, 0x09, 0x6e, 0xd7, 0xd2, 0x2a, 0x3e, 0x69, 0x0d, 0xdc, 0x36, 0x7e, 0xd7, 0x3d, 0x6b, 0xd7,
	0x2c, 0x54, 0x85, 0xe2, 0x79, 0xf7, 0x34, 0x49, 0x64, 0x54, 0xc1, 0x45, 0x3f, 0x89, 0xb3, 0x28,
	0x0f, 0x99, 0x76, 0xaf, 0x55, 0x83, 0xa3, 0x6f, 0x59, 0xc8, 0xbb, 0x46, 0x03, 0x35, 0xa1, 0x82,
	0xe9, 0x84, 0x09, 0x49, 0x79, 0xf4, 0x4d, 0x2d, 0xea, 0x89, 0x4d, 0x50, 0x2f, 0xeb, 0x20, 0x7e,
	0x8b, 0x34, 0x52, 0xab, 0xf5, 0xd1, 0xd3, 0xdf, 0xd4, 0x9b, 0xe0, 0x66, 0xfd, 0x01, 0x94, 0x2f,
	0x78, 0x10, 0x06, 0x82, 0xde, 0x8a, 0x7e, 0x59, 0x7e, 0x2b, 0xf6, 0x67, 0x50, 0xc6, 0x54, 0x59,
	0x7e, 0xbd, 0xdc, 0xf8, 0xa9, 0x7e, 0x5f, 0x07, 0xd7, 0xde, 0x84, 0x6b, 0x5d, 0x6b, 0x33, 0xfd,
	0xa6, 0xeb, 0x18, 0x4a, 0x2e, 0x9d, 0xd2, 0x91, 0xbc, 0x8b, 0x54, 0xd2, 0x74, 0x17, 0xa5, 0x27,
	0x90, 0x8f, 0x92, 0xeb, 0xf5, 0x37, 0xd6, 0x3f, 0x84, 0xaa, 0x3b, 0x1f, 0x8a, 0x11, 0x67, 0xc3,
	0x78, 0x95, 0x92, 0xe1, 0x34, 0x46, 0xad, 0xaf, 0x7e, 0xd8, 0x8d, 0xd4, 0x61, 0x7a, 0xad, 0x23,
	0xda, 0xe3, 0x47, 0x1d, 0x06, 0x52, 0x1d, 0xa7, 0x1b, 0xef, 0xd5, 0x4f, 0xa7, 0x61, 0x4e, 0x7f,
	0x2d, 0x8e, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x9d, 0x3e, 0x0e, 0x57, 0x09, 0x00, 0x00,
}
